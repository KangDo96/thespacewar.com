@use "sass:list";
@import "miscVariables";
@import "cardVariables";
@import "icons";
@import "buttons";
@import "flex";
@import "overwork";
@import "perfectPlan";
@import "counter";
@import "choiceDialog";
@import "cardsOnHand";
@import "card";


@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow;
     -moz-box-shadow: $shadow;       
          box-shadow: $shadow;
}
@mixin perspective($perspectiveValue) {
	-webkit-perspective:$perspectiveValue;
	-moz-perspective:$perspectiveValue;
	perspective:$perspectiveValue;
	-webkit-transform-style:preserve-3d;
	-moz-transform-style:preserve-3d;
	transform-style:preserve-3d;
}

@mixin backface-visibility() {
  -webkit-backface-visibility: hidden;
	-moz-backface-visibility: hidden;
	backface-visibility: hidden; 
}
@mixin transform($transform){
  -webkit-transform: $transform;
  -moz-transform: $transform;
  transform: $transform;
}

@mixin transform-style ($transformStyle){
  -webkit-transform-style: $transformStyle;
	-moz-transform-style: $transformStyle;
	transform-style: $transformStyle; 
}
$color_height:  1px 1px 1px rgba(202, 40, 40, 0.9),
                1px 1px 1px rgba(202, 40, 40, 0.9),
                1px 1px 1px rgba(20,20,20, 0.9),
                1px 1px 1px rgba(202, 40, 40, 0.9),
                1px 1px 1px rgba(202, 40, 40, 0.9),
                1px 1px 1px rgba(20,20,20, 0.9),
                1px 1px 1px rgba(202, 40, 40, 0.9),
                1px 1px 1px rgba(202, 40, 40, 0.9),
                1px 1px 1px rgba(20,20,20, 0.9),
                1px 1px 1px rgba(202, 40, 40, 0.9),
                1px 1px 1px rgba(202, 40, 40, 0.9),
                1px 1px 1px rgba(20,20,20, 0.9),
                1px 1px 1px rgba(202, 40, 40, 0.9),
                1px 1px 1px rgba(202, 40, 40, 0.9),
                1px 1px 1px rgba(20,20,20, 0.9);
$opponent_color_height: -1px 1px 1px rgba(13,	59,	81, 1),
                        -1px 1px 1px rgba(13,	59,	81, 1),
                        -1px 1px 1px rgba(20,20,20, 1),
                        -1px 1px 1px rgba(13,	59,	81, 1),
                        -1px 1px 1px rgba(13,	59,	81, 1),
                        -1px 1px 1px rgba(20,20,20, 1),
                        -1px 1px 1px rgba(13,	59,	81, 1),
                        -1px 1px 1px rgba(13,	59,	81, 1),
                        -1px 1px 1px rgba(20,20,20, 1),
                        -1px 1px 1px rgba(13,	59,	81, 1),
                        -1px 1px 1px rgba(13,	59,	81, 1),
                        -1px 1px 1px rgba(20,20,20, 1),
                        -1px 1px 1px rgba(13,	59,	81, 1),
                        -1px 1px 1px rgba(13,	59,	81, 1),
                        -1px 1px 1px rgba(20,20,20, 1);

                        
.match {
  display: flex;
  flex-direction: column;
  justify-content: center;

  width: 100%;
  height: 100%;
  // overflow: auto;
  perspective: 100px;
}

.match-overlay {
  border: 4px solid black;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  box-sizing: border-box;
  z-index: -1;
}

.field {
  flex: 1 0;
  width: 100%;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  transform: translateZ(var(--z-position));
}

.field-dividerWrapper {
  // position: relative;
  height: 20px;
  z-index: 3;
  display: flex;
  align-items: center;
}

.field-dividerWrapper--placeholder {
  pointer-events: none;
  opacity: 0;
}

.field-divider {
  height: 6px;
  background: rgba(255, 255, 255, .1);
  flex: 1 0 auto;
  border-radius: 30px 30px 60px 60px;
  width: 99.5%;
  margin: 0 auto;
}

.field-dividerContent {
  position: absolute;
  top: var(--gui-height-adjust);
  transform: translateY(-50%);
  left: 0;
  right: 0;
  height: 66px;
}

.field-player, .field-opponent {
  width: 100%;
  display: flex;
  align-items: stretch;
  justify-content: space-between;
  position: relative;
}

.field-player {
  flex: 0 1 54%;
}

.field-opponent {
  flex: 0 1 46%;
  width: 100%;
  // padding-top: 60px; //To accommodate for opponent cards on hand and the opponents "player banner" in the top left corner
  // padding-right: 15%;
  margin-bottom: var(--space-between-GUI-n-draw-pile);
  box-sizing: border-box;
}

.field-piles {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-evenly;
  position: relative;
  z-index: 1;
  min-width: 20%;
  flex: 0 0 auto;
}

.field-commandersAndDrawPile {
  display: flex;
  justify-content: space-evenly;
  align-items: center;
}

.field-opponent .field-commandersAndDrawPile {
  flex-direction: row-reverse;
}

.field-opponent .commanderCard,
.field-opponent .field-drawPile {
  width: $opponentDrawPileCardWidth;
  height: $opponentDrawPileCardHeight;
}

.field-drawPile {
  position: relative;

  .card {
    width: 100%;
    height: 100%;
  }
}

.field-player .field-drawPile {
  width: $playerDrawPileCardWidth;
  height: $playerDrawPileCardHeight;
}

.field-discardPile {
  position: relative;

  .field-player & {
    width: $playerDiscardPileCardWidth;
    height: $playerDiscardPileCardHeight;
  }

  .field-opponent & {
    width: $opponentDiscardPileCardWidth;
    height: $opponentDiscardPileCardHeight;
  }

  .card {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
  }
}

.field-zone {
  flex: 0 0 auto;
  display: flex;
  flex-wrap: nowrap;
  justify-content: center;
  width: 100%;

  .card {
    margin: 0 4px;
    box-sizing: border-box;
  }
}

.field-zoneRows {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.field-opponentZoneRows {
  flex: 1 0 auto;
  justify-content: flex-start;
  align-items: stretch;
}

.field-playerZoneRows {
  flex: 1 0 auto;
  justify-content: flex-start;
  align-items: stretch;
}

.playerCardsInZone {
  flex: 1 0 auto;
  position: relative;
  width: auto;
  margin-top: 16px;
}

.opponentCardsInPlayerZone {
  margin-top: 8px;
  flex: 0 1 auto;
  flex-wrap: nowrap;
}

.field-opponentZoneRow {
  flex-direction: row-reverse;
  flex-wrap: nowrap;
  display: flex;
  align-items: flex-end;

  flex: 1 0 auto;
  position: relative;
  width: auto;
  margin-bottom: 16px;
}

.playerCardsInOpponentZone {
  margin-bottom: 8px;
  flex: 0 1 auto;
  flex-wrap: nowrap;
}

.activateEventCard {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  color: white;
  font-family: "Space Mono", monospace;
  font-size: 32px;
  font-weight: bold;
  color: rgba(255, 255, 255, .8);

  .playerEventCardGhost:hover & {
    color: rgba(255, 255, 255, 1);
  }
}

.field-discardPile .discardPile-cardGhost {
  border: 4px solid $dangerBorderColor;

  &--hoveredOver, &:hover {
    background: rgba(230, 46, 46, 0.2);
  }
}

.discardPile-cardGhost::after {
  content: "";
  position: absolute;
  width: 170%;
  height: 170%;
  top: 50%;
  left: 20%;
  z-index: 10000;
  transform: translate(-50%, -50%);
}

.card-emptyDeck {
  width: $scaledCardWidth;
  height: $scaledCardHeight;
  border-size: 4px;
  border-style: solid;
  border-color: rgba(255, 255, 255, .2);
  background: transparent;
  z-index: $cardGhostZIndex;

  &:hover {
    transition: border-color .15s ease;
    border-color: rgba(255, 255, 255, .4);
  }
}

.holdingCard {
  position: absolute;
  pointer-events: none;
  transform: translate(-10%, -20%);
  z-index: $holdingCardZIndex;
}

.playerActionPointsContainer,
.guideTextContainer {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 80%;
  text-align: center;
  pointer-events: none;
  > * {
    text-shadow: 0px -2px 0px rgba(0, 0, 0, .5),
    0px 2px 0px rgba(0, 0, 0, .5);
  }
}

.playerActionPoints,
.guideText {
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  top: -.1em;

  line-height: 100%;
  font-size: 35px;
  color: white;
  font-weight: bold;
  font-family: "Space mono", sans-serif;
}

.guideText-subText {
  font-size: 20px;
  font-family: "Space mono", sans-serif;
  color: rgba(255, 255, 255, .8);
   & > button {
     pointer-events: initial;
   }
}

.guideText-waitingForOtherPlayer {
  font-size: 20px;
  font-family: "Space mono", sans-serif;
  color: rgba(255, 255, 255, .8);
  position: relative;
  top: -2px;
}

.guideText-drawPhaseText {
  font-size: 3em;
  letter-spacing: .12em;
}

/* It is under test that we do NOT show skip draw button during the draw phase, but we might need this later */
//.guideText-wrapper > .guideText-drawPhaseSubText > .skipDrawCard,
//.guideText-wrapper > .guideText-drawPhaseSubText > .reallySkipDrawCard {
//  position: relative;
//  top: 4px;
//}

.drawPile-draw,
.drawPile-discardTopTwo {
  background-color: rgba(0, 0, 0, .5);
}

.drawPile-cardCount {
  position: absolute;
  left: 10px;
  top: 5px;
}

.drawPile-cardCountText {
  font-size: 23px;
  color: rgba(255, 255, 255, .5);
  font-family: "Space mono", monospace;
}

.match-background {
  width: 100%;
  filter: contrast(101%) brightness(42%) saturate(160%);
}

.match-backgroundWrapper {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 50%;
  left: 50%;
  overflow: hidden;
  transform: translate(-50%, -50%) scale(1.05);
  z-index: -2;
}

.match-backgroundOverlay {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
}

.replace,
.discard,
.playCard {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: rgba(0, 0, 0, 0.5);
  color: white;
  font-family: Helvetica, sans-serif;
  font-size: 16px;
  visibility: hidden;

  .card-ghost:hover & {
    visibility: visible;
  }
}

$shakeDuration: .2s;
$shakeAnimationFunction: ease-out;
$shakeDelay: 0s;

.shake {
  animation: shake $shakeDuration $shakeAnimationFunction;
  animation-delay: $shakeDelay;
}

.shake--upsideDown {
  animation: shake-upsideDown $shakeDuration $shakeAnimationFunction;
  animation-delay: $shakeDelay;
}

.flash-red {
  animation: flash-red .4s linear;
}

.flash {
  animation: flash 1s ease-out;
}

@keyframes flash-red {
  0% {
    background: rgba(255, 40, 40, 0);
  }

  10% {
    background: rgba(255, 40, 40, .35);
  }

  60% {
    background: rgba(255, 40, 40, .4);
  }

  100% {
    background: rgba(255, 40, 40, 0);
  }
}

@keyframes flash {
  50% {
    filter: contrast(50%) brightness(150%);
  }
}


@-webkit-keyframes shake {
  0% {
    transform: translate(2px, 1px) rotate(0deg);
  }
  10% {
    transform: translate(-1px, -2px) rotate(-1deg);
  }
  20% {
    transform: translate(-3px, 0px) rotate(1deg);
  }
  30% {
    transform: translate(0px, 2px) rotate(0deg);
  }
  40% {
    transform: translate(1px, -1px) rotate(1deg);
  }
  50% {
    transform: translate(-1px, 2px) rotate(-1deg);
  }
  60% {
    transform: translate(-3px, 1px) rotate(0deg);
  }
  70% {
    transform: translate(2px, 1px) rotate(-1deg);
  }
  80% {
    transform: translate(-1px, -1px) rotate(1deg);
  }
  90% {
    transform: translate(2px, 2px) rotate(0deg);
  }
  100% {
    transform: translate(1px, -2px) rotate(-1deg);
  }
}

@-webkit-keyframes shake-upsideDown {
  0% {
    transform: translate(2px, 1px) rotate(180deg);
  }
  10% {
    transform: translate(-1px, -2px) rotate(179deg);
  }
  20% {
    transform: translate(-3px, 0px) rotate(181deg);
  }
  30% {
    transform: translate(0px, 2px) rotate(180deg);
  }
  40% {
    transform: translate(1px, -1px) rotate(181deg);
  }
  50% {
    transform: translate(-1px, 2px) rotate(179deg);
  }
  60% {
    transform: translate(-3px, 1px) rotate(180deg);
  }
  70% {
    transform: translate(2px, 1px) rotate(179deg);
  }
  80% {
    transform: translate(-1px, -1px) rotate(181deg);
  }
  90% {
    transform: translate(2px, 2px) rotate(180deg);
  }
  100% {
    transform: translate(1px, -2px) rotate(179deg);
  }

  
}
.mobileOnPortrait {
  display: block;
  width: 1px;
  height: 1px;
  pointer-events: none;
  position: absolute;
  top: 0px;
  left: 0px;
  background: rgba(0,0,0,0);
}
.perspectiveParentLeft {
    @include perspective(600px);
    perspective-origin: right;
    .perspectiveChild {
      @include transform( rotateX(15deg) translateZ(10px));
      @include transform-style( preserve-3d);
      * {
        
      @include transform-style( preserve-3d);
      }
    }
  }
.perspectiveParentRight {
  @include perspective(600px);
    perspective-origin: left;
    .perspectiveChild {
      @include transform( rotateX(15deg) translateZ(10px));
      @include transform-style( preserve-3d);
      
      * {
        
        @include transform-style( preserve-3d);
        }
    }
  }
.perspectiveParentCenter {
  @include perspective(600px);
    perspective-origin: bottom;
    .perspectiveChild {
      // transform: rotateX(15deg) translateZ(10px);
      @include transform( rotateX(15deg) translateZ(var(--z-position)) translateY(calc(4 * var(--z-position))));
      @include transform-style( preserve-3d);
      
      * {
        
        @include transform-style( preserve-3d);
        }
    }
  }

.pile-3d{

  // @function generateList($amount){
  //   $newList: (); 
  //   @for $i from 1 through $amount {
  //     $newList: append($newList, nth($sizes_height,$i), 'comma');
  //   }
  //   $sizeShadow: 10px + $amount;
  //   @return append($newList, $sizeShadow $sizeShadow 15px rgba(0,0,0,.9), 'comma');
  // }

// @for $i from 1 through 15 {
//     &.partial-#{$i}{
//       transform: translateX(calc(-1 * calc(#{$i / 15} * 15px))) translateY(calc(calc(#{$i / 15} * -15px)));
      
//       @include box-shadow( generateList($i));
//     }
//   }
}

.card-height{
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
    
  @for $i from 1 through 15 {
    &.h-#{$i}{
      @include transform( translateZ(calc(1px * #{$i})));
      pointer-events: none;
      @include box-shadow(nth($color_height,$i));
    }
  } 
}

.opponent-card-height{
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
    
  @for $i from 1 through 15 {
    &.h-#{$i}{
      @include transform( translateZ(calc(1px * #{$i})));
      pointer-events: none;
      @include box-shadow(nth($opponent_color_height,$i));
    }
  } 
}

.no-flick {
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  -webkit-transform:translateZ(0.1px);
  transform: translateZ(0.1px);
}

.flattenComponent > .vue-portal-target {
  transform-style: flat;
}